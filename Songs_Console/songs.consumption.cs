// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace Songs_Console
{
    public partial class Songs
    {
        /// <summary>
        /// model input class for Songs.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"artist")]
            public string Artist { get; set; }

            [ColumnName(@"song")]
            public string Song { get; set; }

            [ColumnName(@"ids")]
            public string Ids { get; set; }

            [ColumnName(@"genre")]
            public string Genre { get; set; }

            [ColumnName(@"acousticness")]
            public float Acousticness { get; set; }

            [ColumnName(@"danceability")]
            public float Danceability { get; set; }

            [ColumnName(@"duration_ms")]
            public float Duration_ms { get; set; }

            [ColumnName(@"energy")]
            public float Energy { get; set; }

            [ColumnName(@"instrumentalness")]
            public float Instrumentalness { get; set; }

            [ColumnName(@"key")]
            public float Key { get; set; }

            [ColumnName(@"liveness")]
            public float Liveness { get; set; }

            [ColumnName(@"loudness")]
            public float Loudness { get; set; }

            [ColumnName(@"speechiness")]
            public float Speechiness { get; set; }

            [ColumnName(@"tempo")]
            public float Tempo { get; set; }

            [ColumnName(@"mode")]
            public float Mode { get; set; }

            [ColumnName(@"valence")]
            public float Valence { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for Songs.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"artist")]
            public float[] Artist { get; set; }

            [ColumnName(@"song")]
            public float[] Song { get; set; }

            [ColumnName(@"ids")]
            public float[] Ids { get; set; }

            [ColumnName(@"genre")]
            public uint Genre { get; set; }

            [ColumnName(@"acousticness")]
            public float Acousticness { get; set; }

            [ColumnName(@"danceability")]
            public float Danceability { get; set; }

            [ColumnName(@"duration_ms")]
            public float Duration_ms { get; set; }

            [ColumnName(@"energy")]
            public float Energy { get; set; }

            [ColumnName(@"instrumentalness")]
            public float Instrumentalness { get; set; }

            [ColumnName(@"key")]
            public float Key { get; set; }

            [ColumnName(@"liveness")]
            public float Liveness { get; set; }

            [ColumnName(@"loudness")]
            public float Loudness { get; set; }

            [ColumnName(@"speechiness")]
            public float Speechiness { get; set; }

            [ColumnName(@"tempo")]
            public float Tempo { get; set; }

            [ColumnName(@"mode")]
            public float Mode { get; set; }

            [ColumnName(@"valence")]
            public float Valence { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public string PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("songs.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
