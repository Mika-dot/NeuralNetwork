﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace Songs_Console
{
    public partial class Songs
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"acousticness", @"acousticness"),new InputOutputColumnPair(@"danceability", @"danceability"),new InputOutputColumnPair(@"duration_ms", @"duration_ms"),new InputOutputColumnPair(@"energy", @"energy"),new InputOutputColumnPair(@"instrumentalness", @"instrumentalness"),new InputOutputColumnPair(@"key", @"key"),new InputOutputColumnPair(@"liveness", @"liveness"),new InputOutputColumnPair(@"loudness", @"loudness"),new InputOutputColumnPair(@"speechiness", @"speechiness"),new InputOutputColumnPair(@"tempo", @"tempo"),new InputOutputColumnPair(@"mode", @"mode"),new InputOutputColumnPair(@"valence", @"valence")})      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"artist",outputColumnName:@"artist"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"song",outputColumnName:@"song"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"ids",outputColumnName:@"ids"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"acousticness",@"danceability",@"duration_ms",@"energy",@"instrumentalness",@"key",@"liveness",@"loudness",@"speechiness",@"tempo",@"mode",@"valence",@"artist",@"song",@"ids"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"genre",inputColumnName:@"genre"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(new LbfgsMaximumEntropyMulticlassTrainer.Options(){L1Regularization=0.03717204F,L2Regularization=0.0787712F,LabelColumnName=@"genre",FeatureColumnName=@"Features"}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
